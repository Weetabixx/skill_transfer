scope:
  # weights
  - controllable-weight: 0.001 # mu * 1
  - constraint-weight: 10.001 # mu + 10
  
  # definition of object frames 
  - target-object-frame:
      frame-mul:
        - target-object-grasp # This has to be provided

  - tool-frame:
      frame-mul:
        - right_ee
        - tool-grasp # This has to be provided

  # definition of features
  - tool-point: 
      transform-vector: [tool-frame, {vector3: [0, 0, 0.025]}]      
  - target-object-point:
      vector-add:
        - transform-vector: [target-object-frame, edge-point]
        - {vector3: [0.02, 0.05, -0.02]} # 20 cm above the edge

  # expressions used in constraints 
  - distance: {vector-sub: [target-object-point, tool-point]}
  
  - r_goal_rot:
      rotation-mul: [tool-quaternion, {orientation-of: target-object-frame}]
  - r_rot: {orientation-of: tool-frame}
  - r_rot_error: {vector-norm: {rot-vector: {rotation-mul: [{inverse-rotation: r_rot}, r_goal_rot]}}}
  - r_rot_scaling: 
      double-if:
      - {double-sub: [rot_thresh, r_rot_error]}
      - 1
      - {double-div: [rot_thresh, r_rot_error]}
  - r_intermediate_goal_rot:
      slerp:
      - r_rot
      - r_goal_rot
      - r_rot_scaling
  - r_rot_control:
      scale-vector: [rot_p_gain, {rotate-vector: [r_rot, {rot-vector: {rotation-mul: [{inverse-rotation: r_rot}, r_intermediate_goal_rot]}}]}]

soft-constraints: 
  - soft-constraint: 
      - {double-sub: [-0.007, {x-coord: distance}]} # control law for lower boundary
      - {double-sub: [0.007, {x-coord: distance}]} # control law for upper boundary
      - constraint-weight # weight of this constraint
      - {x-coord: distance} # expression used for Jacobian calcuation
      - contact_x # name of expression reported
  - soft-constraint: 
      - {double-sub: [-0.007, {y-coord: distance}]} # control law for lower boundary
      - {double-sub: [0.007, {y-coord: distance}]} # control law for upper boundary
      - constraint-weight # weight of this constraint
      - {y-coord: distance} # expression used for Jacobian calcuation
      - contact_y # name of expression reported
  - soft-constraint: 
      - {double-sub: [-0.007, {z-coord: distance}]} # control law for lower boundary
      - {double-sub: [0.007, {z-coord: distance}]} # control law for upper boundary
      - constraint-weight # weight of this constraint
      - {z-coord: distance} # expression used for Jacobian calcuation
      - contact_z # name of expression reported
  - soft-constraint: [{x-coord: r_rot_control}, {x-coord: r_rot_control}, weight_rot_control, {x-coord: {rot-vector: r_rot}}, right EE x-rot control slack]
  - soft-constraint: [{y-coord: r_rot_control}, {y-coord: r_rot_control}, weight_rot_control, {y-coord: {rot-vector: r_rot}}, right EE y-rot control slack]
  - soft-constraint: [{z-coord: r_rot_control}, {z-coord: r_rot_control}, weight_rot_control, {z-coord: {rot-vector: r_rot}}, right EE z-rot control slack]

